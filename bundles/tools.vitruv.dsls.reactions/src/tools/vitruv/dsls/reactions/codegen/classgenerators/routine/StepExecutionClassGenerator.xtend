package tools.vitruv.dsls.reactions.codegen.classgenerators.routine

import tools.vitruv.dsls.reactions.codegen.classgenerators.ClassGenerator
import tools.vitruv.dsls.reactions.codegen.typesbuilder.TypesBuilderExtensionProvider
import org.eclipse.xtend2.lib.StringConcatenationClient
import tools.vitruv.dsls.reactions.codegen.helper.AccessibleElement
import org.eclipse.xtext.common.types.JvmGenericType

/**
 * Defines a step of the execution of a Reaction or Routine.
 * The class has to be generated and nested into another class by calling {@link #generateEmptyClass()}
 * and {@link #generateBody()}. The code for executing the step is delivered by calling 
 * {@link #generateStepExecutionCode(String, String, Iterable<String>)}.
 * A step may provide new accessible elements (see {@link #getNewlyAccessibleElementsAfterExecution()}),
 * which, in that case, are returned from the execution code and provide an elements of the type 
 * delivered by {@link #getNewlyAccessibleElementsContainerType()}.
 */
abstract class StepExecutionClassGenerator extends ClassGenerator {

	new(TypesBuilderExtensionProvider typesBuilderExtensionProvider) {
		super(typesBuilderExtensionProvider)
	}

	/**
	 * Returns whether this step is empty, i.e., does neither return a generated type nor
	 * execution code.
	 */
	def boolean isEmpty() {
		return false
	}

	/**
	 * Returns the code for executing this step. Requires the generated class to be nested
	 * into the calling class. The return value of the expression is of the type of the
	 * newly accessible elements container type (see {@link #getNewlyAccessibleElementsContainerType}),
	 * if it exists. Otherwise, it is {@link boolean}.
	 * In case no execution code is produced, the result may be empty.
	 */
	def StringConcatenationClient generateStepExecutionCode(StringConcatenationClient prefix,
		String executionStateAccessExpression, String routinesFacadeAccessExpression,
		Iterable<String> accessibleElementsAccessExpressions, StringConcatenationClient suffix)

	/**
	 * Returns the elements generated by this step and provided via the container type
	 * (see {@link #getNewlyAccessibleElementsContainerType()}). May be empty.
	 */
	def Iterable<AccessibleElement> getNewlyAccessibleElementsAfterExecution()

	/**
	 * Returns the class being a container for the elements newly accessible after
	 * executing this step. This type may be {@code null}.
	 */
	def JvmGenericType getNewlyAccessibleElementsContainerType()

	protected def generateNewlyAccessibleElementsContainerClass(String qualifiedClassName) {
		return generateElementsContainerClass(qualifiedClassName, newlyAccessibleElementsAfterExecution)
	}
}
