/*
 * generated by Xtext 2.32.0
 */
package tools.vitruv.dsls.commonalities.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter
import tools.vitruv.dsls.commonalities.language.Commonality
import tools.vitruv.dsls.commonalities.language.CommonalityFile
import tools.vitruv.dsls.commonalities.services.CommonalitiesLanguageGrammarAccess

class CommonalitiesLanguageFormatter extends XbaseFormatter {
	
	@Inject extension CommonalitiesLanguageGrammarAccess

	def dispatch void format(CommonalityFile commonalityFile, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (operatorImport : commonalityFile.operatorImports) {
			operatorImport.format
		}
		for (metamodelImport : commonalityFile.metamodelImports) {
			metamodelImport.format
		}
		commonalityFile.concept.format
		commonalityFile.commonality.format
	}

	def dispatch void format(Commonality commonality, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (participation : commonality.participations) {
			participation.format
		}
		for (commonalityAttribute : commonality.attributes) {
			commonalityAttribute.format
		}
		for (commonalityReference : commonality.references) {
			commonalityReference.format
		}
	}
	
	// TODO: implement for Participation, ParticipationRelation, ParticipationCondition, CommonalityAttribute, SimpleAttributeMapping, OperatorAttributeMapping, CommonalityReference, SimpleReferenceMapping, OperatorReferenceMapping, ReferencedParticipationAttributeOperand, LiteralOperand, ParticipationAttributeOperand, CommonalityAttributeOperand
}
